# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cMWLMrpbeSprtwxiH3NJoQSwmibTXIys
"""

import time
import random
import networkx as nx
import matplotlib.pyplot as plt

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def add_edge(self, src, dest, weight):
        self.graph[src][dest] = weight
        self.graph[dest][src] = weight

    def min_key(self, key, mst_set):
        min_val = float('inf')
        min_index = -1
        for v in range(self.V):
            if key[v] < min_val and not mst_set[v]:
                min_val = key[v]
                min_index = v
        return min_index

    def prim_mst(self):
        parent = [-1] * self.V
        key = [float('inf')] * self.V
        key[0] = 0
        mst_set = [False] * self.V

        start_time = time.time()

        for _ in range(self.V):
            u = self.min_key(key, mst_set)
            mst_set[u] = True
            for v in range(self.V):
                if self.graph[u][v] > 0 and not mst_set[v] and key[v] > self.graph[u][v]:
                    key[v] = self.graph[u][v]
                    parent[v] = u

        end_time = time.time()

        total_time = end_time - start_time

        return total_time, parent

def draw_graph(graph, parent):
    G = nx.Graph()
    for i in range(graph.V):
        if parent[i] != -1:
            G.add_edge(i, parent[i], weight=graph.graph[i][parent[i]])

    pos = nx.spring_layout(G)
    labels = nx.get_edge_attributes(G, 'weight')
    nx.draw(G, pos, with_labels=True, node_size=700, node_color="skyblue", font_size=10, font_weight="bold")
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
    plt.title("Minimum Spanning Tree Visualization")
    plt.show()

# Example usage
if __name__ == "__main__":
    sizes = [5, 10, 25, 50, 75, 100]

    for size in sizes:
        graph = Graph(size)
        for i in range(size):
            for j in range(i+1, size):
                graph.add_edge(i, j, random.randint(1, 100))

        time_taken, parent = graph.prim_mst()
        draw_graph(graph, parent)

        print(f"Execution time for {size} nodes: {time_taken} seconds")