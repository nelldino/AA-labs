# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N2XJrg1cA52QFHCGScZDlmEdNzAs4XgS
"""

import random
import networkx as nx
import matplotlib.pyplot as plt
import time

def generate_dense_graph(num_nodes):
    graph = nx.Graph()
    for i in range(num_nodes):
        graph.add_node(i)
        for j in range(i + 1, num_nodes):
            if random.random() < 0.7:  # Randomly connect nodes with 70% probability for denser graph
                weight = random.randint(1, 10)
                graph.add_edge(i, j, weight=weight)
    return graph


def floyd_warshall(graph):
    num_nodes = len(graph.nodes)
    dist = [[float('inf')] * num_nodes for _ in range(num_nodes)]

    # Initialize distances with edge weights
    for u, v, weight in graph.edges(data='weight'):
        dist[u][v] = weight
        dist[v][u] = weight

    # Initialize distances to self as 0
    for i in range(num_nodes):
        dist[i][i] = 0

    start_time = time.time()

    # Floyd-Warshall algorithm
    for k in range(num_nodes):
        for i in range(num_nodes):
            for j in range(num_nodes):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    end_time = time.time()
    execution_time = end_time - start_time

    return dist, execution_time

def visualize_graph(graph):
    plt.figure(figsize=(10, 8))  # Larger figsize
    pos = nx.spring_layout(graph)  # Layout for better visualization
    nx.draw(graph, pos, with_labels=True, node_size=500, node_color="skyblue", font_size=10, font_weight="bold")
    labels = nx.get_edge_attributes(graph, 'weight')
    nx.draw_networkx_edge_labels(graph, pos, edge_labels=labels)
    plt.title("Graph Visualization")
    plt.show()

def visualize_floyd_warshall(distances, execution_time):
    print("Distances:")
    for i, row in enumerate(distances):
        print(f"From node {i}: {row}")

    print(f"\nExecution time: {execution_time} seconds")

# Generate and visualize sparse graphs for different numbers of nodes
for num_nodes in [5, 10, 25, 50, 75, 100]:
    print(f"Generating and visualizing sparse graph with {num_nodes} nodes...")
    graph = generate_dense_graph(num_nodes)
    visualize_graph(graph)

    # Perform Floyd-Warshall algorithm
    distances, execution_time = floyd_warshall(graph)

    # Visualize Floyd-Warshall algorithm
    visualize_floyd_warshall(distances, execution_time)